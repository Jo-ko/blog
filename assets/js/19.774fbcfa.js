(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{580:function(s,a,t){"use strict";t.r(a);var e=t(3),i=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"事件循环机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件循环机制"}},[s._v("#")]),s._v(" 事件循环机制")]),s._v(" "),t("ol",[t("li",[s._v("先从多个消息队列中选出一个最老的任务，这个任务称为 oldestTask")]),s._v(" "),t("li",[s._v("然后循环系统记录任务开始执行的时间，并把这个 oldestTask 设置为当前正在执行的任务；")]),s._v(" "),t("li",[s._v("当任务执行完成之后，删除当前正在执行的任务，并从对应的消息队列中删除掉这个 oldestTask；")]),s._v(" "),t("li",[s._v("最后统计执行完成的时长等信息。")])]),s._v(" "),t("h2",{attrs:{id:"宏任务和微任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#宏任务和微任务"}},[s._v("#")]),s._v(" 宏任务和微任务")]),s._v(" "),t("h3",{attrs:{id:"微任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微任务"}},[s._v("#")]),s._v(" 微任务")]),s._v(" "),t("h4",{attrs:{id:"如何产生微任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何产生微任务"}},[s._v("#")]),s._v(" 如何产生微任务")]),s._v(" "),t("ol",[t("li",[s._v("MutationObserver")]),s._v(" "),t("li",[s._v("Promise")]),s._v(" "),t("li",[s._v("queueMicrotask")])]),s._v(" "),t("h4",{attrs:{id:"微任务的执行过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微任务的执行过程"}},[s._v("#")]),s._v(" 微任务的执行过程")]),s._v(" "),t("ol",[t("li",[s._v("在全局执行上下文环境中创建微任务队列\n"),t("ul",[t("li",[s._v("每个宏任务都会创建自己的微任务队列")]),s._v(" "),t("li",[s._v("这里的全局执行上下文不是我们之前说的")])])]),s._v(" "),t("li",[s._v("宏任务执行过程将遇到的微任务放到微任务队列中")]),s._v(" "),t("li",[s._v("宏任务执行完毕后会检查当前环境的微任务队列,按照顺序执行微任务(先进先出)")]),s._v(" "),t("li",[s._v("在执行微任务的过程中遇到微任务,会将该微任务添加到当前的微任务队列,直到队列是空的,而不是放到下一个宏任务中执行\n"),t("ul",[t("li",[t("strong",[s._v("因此微任务的执行时长会影响到当前宏任务的执行时长")])])])])]),s._v(" "),t("h3",{attrs:{id:"settimeout"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#settimeout"}},[s._v("#")]),s._v(" setTimeout")]),s._v(" "),t("p",[s._v("在原有的消息队列上,增加延迟队列")]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("void ProcessTimerTask(){\n  //从delayed_incoming_queue中取出已经到期的定时器任务\n  //依次执行这些任务\n}\n\nTaskQueue task_queue；\nvoid ProcessTask();\nbool keep_running = true;\nvoid MainTherad(){\n  for(;;){\n    //执行消息队列中的任务\n    Task task = task_queue.takeTask();\n    ProcessTask(task);\n    \n    //执行延迟队列中的任务\n    ProcessDelayTask()\n\n    if(!keep_running) //如果设置了退出标志，那么直接退出线程循环\n        break; \n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("setTimeout的一些问题")]),s._v(" "),t("ol",[t("li",[s._v("setTimeout会在之前存在的消息队列任务完成后再开始执行,因此 "),t("strong",[s._v("如果当前任务执行过久,会影响到定时器任务")])]),s._v(" "),t("li",[s._v("setTimeout在递归嵌套调用时,超过5次调用时(chromium内核), "),t("strong",[s._v("如果时间间隔小于4ms,会被设置为4ms")]),s._v(",原因是避免cpu的忙碌等待(cpu-spinning)检查过于频繁")]),s._v(" "),t("li",[s._v("未被激活的页面定时器的延迟时间会被锁定为1000ms,目的是为了避免性能损耗")]),s._v(" "),t("li",[s._v("定时器的最大时间不能超过32bit存储的数字大小(2147483647),超过会溢出")])])]),s._v(" "),t("h3",{attrs:{id:"promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[s._v("#")]),s._v(" Promise")]),s._v(" "),t("ol",[t("li",[s._v("Promise是微任务\n"),t("ol",[t("li",[s._v("由于promise采用.then延时绑定回调机制")]),s._v(" "),t("li",[s._v("初始化Promise的时候会执行传入的回调函数,前后冲突,因此需要使用微任务来延迟执行")])])]),s._v(" "),t("li",[s._v("Promise回调函数返回值是穿透的")]),s._v(" "),t("li",[s._v("Promise的错误是冒泡的")])]),s._v(" "),t("h3",{attrs:{id:"生成器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成器"}},[s._v("#")]),s._v(" 生成器")]),s._v(" "),t("h3",{attrs:{id:"协程的实现方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#协程的实现方式"}},[s._v("#")]),s._v(" 协程的实现方式")]),s._v(" "),t("ol",[t("li",[s._v("子协程和父协程是在主线程上交互执行的，并不是并发执行的，它们之前的切换是通过 yield 和 gen.next 来配合完成的。")]),s._v(" "),t("li",[s._v("当在子协程中调用了 yield 方法时，JavaScript 引擎会保存 gen 协程当前的调用栈信息，并恢复父协程的调用栈信息。同样，当在父协程中执行 gen.next 时，JavaScript 引擎会保存父协程的调用栈信息，并恢复子协程的调用栈信息。")])]),s._v(" "),t("h3",{attrs:{id:"执行器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行器"}},[s._v("#")]),s._v(" 执行器")]),s._v(" "),t("p",[s._v("执行生成器的代码函数(co库)")])])}),[],!1,null,null,null);a.default=i.exports}}]);