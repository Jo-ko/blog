(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{581:function(s,e,t){"use strict";t.r(e);var a=t(3),n=Object(a.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"url-urn-uri"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#url-urn-uri"}},[s._v("#")]),s._v(" URL&URN&URI")]),s._v(" "),t("ul",[t("li",[s._v("url表示资源地址")]),s._v(" "),t("li",[s._v("urn表示资源名称")]),s._v(" "),t("li",[s._v("uri是url和urn的超集,用于表示资源的唯一性")])]),s._v(" "),t("h2",{attrs:{id:"响应码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#响应码"}},[s._v("#")]),s._v(" 响应码")]),s._v(" "),t("p",[s._v("1xx: 表示请求已收到,需要进一步处理\n- 100: 上传大文件时返回, 客户端请求头中需要携带: Expect: 100-continue\n- 101: 协议升级如升级到websocket或者http2.0\n- 102: 表示请求需要处理较多的文件\n2xx: 请求处理成功\n3xx: 表示重定向或者从缓存读取\n- 304: 从缓存中读取资源\n4xx: 客户端请求错误\n- 401 用户未认证\n- 404 服务端不存在该资源\n- 405 请求方法错误\n5xx: 服务端处理错误\n- 502 代理服务器无法得到响应\n- 504 超时, 代理服务器和源服务器连接超时")]),s._v(" "),t("h3",{attrs:{id:"长连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#长连接"}},[s._v("#")]),s._v(" 长连接")]),s._v(" "),t("p",[s._v("http1.1之后默认支持,header上会显示connection: keep-alive或者proxy-connection: keep-alive")]),s._v(" "),t("h3",{attrs:{id:"上下文请求头"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#上下文请求头"}},[s._v("#")]),s._v(" 上下文请求头")]),s._v(" "),t("ul",[t("li",[s._v("User-Agent: 表示客户端类型")]),s._v(" "),t("li",[s._v("Referer: 当前请求上下文域名, 用于缓存策略,防盗链")]),s._v(" "),t("li",[s._v("Server: 服务端接收服务软件")]),s._v(" "),t("li",[s._v("Allow: 告诉客户端该URL上的资源允许哪些方法")]),s._v(" "),t("li",[s._v("Accept-Ranges: 告诉客户端服务器上该资源是否允许range请求o")])]),s._v(" "),t("h3",{attrs:{id:"http包体传输方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http包体传输方式"}},[s._v("#")]),s._v(" HTTP包体传输方式")]),s._v(" "),t("ol",[t("li",[s._v("在头信息中添加Content-Length, 表示包体大小,这种明确表示包体大小的信息有助于接受端解析内容")]),s._v(" "),t("li",[s._v("使用Transfer-Encoding头部指明使用Chunk传输方式,可以动态的推送内容\n"),t("ul",[t("li",[s._v("chunk body组成: chunk(chunk-size, chunk-data),last-chunk, trailer-part, CRLF")])])])]),s._v(" "),t("h3",{attrs:{id:"断点续传和多线程下载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#断点续传和多线程下载"}},[s._v("#")]),s._v(" 断点续传和多线程下载")]),s._v(" "),t("h3",{attrs:{id:"session-cookie-token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#session-cookie-token"}},[s._v("#")]),s._v(" session, cookie, token")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("session是如何实现登录的")]),s._v(" "),t("ol",[t("li",[s._v("客户端发送登录请求给服务端")]),s._v(" "),t("li",[s._v("服务端接受消息与持久数据库中的数据进行比对,同时将带有过期时间的会话数据session写入内存数据库")]),s._v(" "),t("li",[s._v("服务端将带有会话状态的sessionId以cookie的方式返回给客户端")]),s._v(" "),t("li",[s._v("客户端在请求其他接口时会带上cookie")]),s._v(" "),t("li",[s._v("服务端比对cookie中携带的session信息与内存数据")])])]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("广告是如何追踪你的行为的")]),s._v(" "),t("p",[s._v("原理是利用了第三方cookie")]),s._v(" "),t("ol",[t("li",[s._v("网站A请求了百度的图片(第三方域名), 第三方返回的数据中携带了cookie")]),s._v(" "),t("li",[s._v("当你访问网站B的时候,同样请求了第三方百度的接口,此时会携带上之前的cookie")])])]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("session和token的区别")]),s._v(" "),t("ol",[t("li",[s._v("session是记录客户端和服务端会话状态的,是可以记录会话信息的; token更多指的是一种用户凭证(身份证ID), ID里面有用户的所有信息,因此是无状态的")]),s._v(" "),t("li",[s._v("session只是简单的用户信息记录是不安全的, token是有一定加密的,有唯一性,是相对安全的")])])]),s._v(" "),t("h3",{attrs:{id:"缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[s._v("#")]),s._v(" 缓存")]),s._v(" "),t("h4",{attrs:{id:"http1-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http1-1"}},[s._v("#")]),s._v(" HTTP1.1")]),s._v(" "),t("p",[s._v("客户端缓存过期计算方式")]),s._v(" "),t("div",{staticClass:"language-md line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[s._v("// true未过期,false过期\nresponseIsFresh = freshnessLifetime(缓存新鲜度时间) > currentAge(资源的周期时间);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("freshnessLifetime 缓存新鲜度计算方式")]),s._v(" "),t("p",[s._v("freshnessLifetime: 按照下面的优先级取其响应通头值")]),s._v(" "),t("ol",[t("li",[s._v("当Cache-Control存在 "),t("strong",[s._v("s-maxage")]),s._v(" 值时使用该值, s-maxage指的是中间代理服务器的共享缓存")]),s._v(" "),t("li",[s._v("当Cache-Control存在 "),t("strong",[s._v("max-age")]),s._v(" 指令时使用该值；或")]),s._v(" "),t("li",[s._v("当请求头存在 "),t("strong",[s._v("Expires")]),s._v(" 响应头时，使用该值减去 Date 响应头的值作为当前缓存新鲜度")]),s._v(" "),t("li",[s._v("没有任何显式地指定过期时间时，客户端可选地可以启用 "),t("strong",[s._v("隐式的缓存新鲜度算法")]),s._v(" 计算当前响应新鲜度。")])]),s._v(" "),t("p",[s._v("**** 隐式的缓存新鲜度算法\nage响应头(浏览器获取文件的时间)的值减去Last-Modified(文件上次修改时间)中的值的10%作为新鲜度的值")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" freshnessLifeTime "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dateValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" lastModifiedValue"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("currentAge")]),s._v(" "),t("ol",[t("li",[s._v("currentAge不是头部Age字段")]),s._v(" "),t("li",[s._v("currentAge计算涉及到头部Age字段")])]),s._v(" "),t("p",[t("strong",[s._v("Age头部字段")]),s._v("\n响应头中的age指的是自源服务器发出资源的响应，到客户端使用这个资源缓存的时候，经过的秒数,即在代理服务器中的时间")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("** 例如下面age要加上代理服务器和源服务器之间的时间\n客户端 -"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 代理服务器A -"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 代理服务器B -"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" 源服务器\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("涉及到的计算名词")]),s._v("\nage_value: 响应头部Age字段\ndate_value: 响应头部date字段\nnow: 当前时间\nrequest_time: 发起请求时的时间\nresponse_time: 收到响应时的时间")]),s._v(" "),t("p",[t("strong",[s._v("计算过程")])]),s._v(" "),t("div",{staticClass:"language-md line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[s._v("currentAge = 收到响应时的age值 + 本地缓存中的时间\n收到响应时的age值 = max(用Date字段计算Age, 逐跳计算Age) // 在1.1版本之前是没有age这个响应头属性的,所以只能通过Date字段来计算\n    用Date字段计算Age = max(0, response_time - data_value);\n    逐跳计算Age = age_value - (response_time - request_time);\n本地缓存中的时间 = now - response_time\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])])]),s._v(" "),t("h3",{attrs:{id:"network面板中的请求列表数据含义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#network面板中的请求列表数据含义"}},[s._v("#")]),s._v(" network面板中的请求列表数据含义")]),s._v(" "),t("p",[s._v("Queueing: 在请求队列中的时间。\nStalled: 从TCP 连接建立完成，到真正可以传输数据之间的时间差，此时间包括代理协商时间。\nProxy negotiation: 与代理服务器连接进行协商所花费的时间。\nDNS Lookup: 执行DNS查找所花费的时间，页面上的每个不同的域都需要进行DNS查找。\nInitial Connection / Connecting: 建立连接所花费的时间，包括TCP握手/重试和协商SSL。\nSSL: 完成SSL握手所花费的时间。\nRequest sent: 发出网络请求所花费的时间，通常为一毫秒的时间。\nWaiting(TFFB): TFFB 是发出页面请求到接收到应答数据第一个字节的时间。\nContent Download: 接收响应数据所花费的时间。")])])}),[],!1,null,null,null);e.default=n.exports}}]);